Ø
PC:\Users\User\source\repos\Ozow.Asessment.Core\Ozow.Assessment.GameOfLife\App.cs
	namespace 	
Ozow
 
. 

Assessment 
. 

GameOfLife $
{ 
public 

class 
App 
{ 
private 
readonly 
IBoardService &
boardService' 3
;3 4
private		 
readonly		 
IGameService		 %
gameService		& 1
;		1 2
public 
App 
( 
IGameService 
gameService  +
,+ ,
IBoardService- :
boardService; G
)G H
{ 	
this 
. 
boardService 
= 
boardService  ,
;, -
this 
. 
gameService 
= 
gameService *
;* +
} 	
public 
void 
Run 
( 
) 
{ 	
int 
size 
= 
$num 
; 
var 
board 
= 
this 
. 
boardService *
.* +$
SetupGameBoardWithValues+ C
(C D
sizeD H
)H I
;I J
this 
. 
gameService 
. 
PlayGame %
(% &
board& +
,+ ,
size- 1
,1 2
$num3 5
)5 6
;6 7
} 	
} 
} ’&
_C:\Users\User\source\repos\Ozow.Asessment.Core\Ozow.Assessment.GameOfLife\Board\BoardService.cs
	namespace 	
Ozow
 
. 

Assessment 
. 

GameOfLife $
.$ %
Board% *
{ 
public		 

class		 
BoardService		 
:		 
IBoardService		  -
{

 
private 
Cell 
[ 
] 
[ 
] 
GenerateArray &
(& '
int' *
size+ /
)/ 0
{ 	
var 
array 
= 
new 
Cell  
[  !
size! %
]% &
[& '
]' (
;( )
for 
( 
int 
i 
= 
$num 
; 
i 
< 
array  %
.% &
Length& ,
;, -
i. /
++/ 1
)1 2
{ 
array 
[ 
i 
] 
= 
new 
Cell #
[# $
size$ (
]( )
;) *
} 
return 
array 
; 
} 	
public 
Cell 
[ 
] 
[ 
] $
SetupGameBoardWithValues 0
(0 1
int1 4
size5 9
)9 :
{ 	
Cell 
[ 
] 
[ 
] 
	gameBoard 
=  
GenerateArray! .
(. /
size/ 3
)3 4
;4 5
for 
( 
int 
i 
= 
$num 
; 
i 
< 
size  $
;% &
i' (
++( *
)* +
{ 
for 
( 
int 
j 
= 
$num 
; 
j  !
<" #
size$ (
;( )
j* +
+++ -
)- .
{ 
	gameBoard 
[ 
i 
]  
[  !
j! "
]" #
=$ %
new& )
Cell* .
(. /
new/ 2
Random3 9
(9 :
): ;
.; <
NextEnum< D
<D E
StateE J
>J K
(K L
)L M
,M N
iO P
,P Q
jR S
)S T
;T U
} 
} 
return 
	gameBoard 
; 
} 	
public!! 
List!! 
<!! 
Cell!! 
>!! 
CountCellNeighbours!! -
(!!- .
Cell!!. 2
[!!2 3
]!!3 4
[!!4 5
]!!5 6
board!!7 <
,!!< =
int!!> A
x!!B C
,!!C D
int!!E H
y!!I J
,!!J K
int!!L O
size!!P T
)!!T U
{"" 	
List## 
<## 
Cell## 
>## 
neighboringCells## '
=##( )
new##* -
List##. 2
<##2 3
Cell##3 7
>##7 8
(##8 9
)##9 :
;##: ;
for$$ 
($$ 
int$$ 
i$$ 
=$$ 
-$$ 
$num$$ 
;$$ 
i$$ 
<$$  
$num$$! "
;$$" #
i$$$ %
++$$% '
)$$' (
{%% 
for&& 
(&& 
int&& 
j&& 
=&& 
-&& 
$num&& 
;&&  
j&&! "
<&&# $
$num&&% &
;&&& '
j&&( )
++&&) +
)&&+ ,
{'' 
int(( 
col(( 
=(( 
((( 
x((  
+((! "
i((# $
+((% &
size((' +
)((+ ,
%((- .
size((/ 3
;((3 4
int)) 
row)) 
=)) 
()) 
y))  
+))! "
j))# $
+))% &
size))' +
)))+ ,
%))- .
size))/ 3
;))3 4
neighboringCells** $
.**$ %
Add**% (
(**( )
board**) .
[**. /
col**/ 2
]**2 3
[**3 4
row**4 7
]**7 8
)**8 9
;**9 :
}++ 
},, 
neighboringCells.. 
... 
Remove.. #
(..# $
board..$ )
[..) *
x..* +
]..+ ,
[.., -
y..- .
]... /
)../ 0
;..0 1
return00 
neighboringCells00 #
;00# $
}11 	
}22 
}33 ¼
`C:\Users\User\source\repos\Ozow.Asessment.Core\Ozow.Assessment.GameOfLife\Board\IBoardService.cs
	namespace 	
Ozow
 
. 

Assessment 
. 

GameOfLife $
.$ %
Board% *
{ 
public 

	interface 
IBoardService "
{ 
Cell		 
[		 
]		 
[		 
]		 $
SetupGameBoardWithValues		 )
(		) *
int		* -
size		. 2
)		2 3
;		3 4
List 
< 
Cell 
> 
CountCellNeighbours &
(& '
Cell' +
[+ ,
], -
[- .
]. /
board0 5
,5 6
int7 :
x; <
,< =
int> A
yB C
,C D
intE H
sizeI M
)M N
;N O
} 
} –
XC:\Users\User\source\repos\Ozow.Asessment.Core\Ozow.Assessment.GameOfLife\Enums\State.cs
	namespace 	
Ozow
 
. 

Assessment 
. 

GameOfLife $
.$ %
Enums% *
{ 
public 

enum 
State 
{ 
Alive 
, 
Dead 
} 
} Š%
]C:\Users\User\source\repos\Ozow.Asessment.Core\Ozow.Assessment.GameOfLife\Game\GameService.cs
	namespace 	
Ozow
 
. 

Assessment 
. 

GameOfLife $
.$ %
Game% )
{ 
public 

class 
GameService 
: 
IGameService +
{		 
private 
readonly 
IBoardService &
boardService' 3
;3 4
public 
GameService 
( 
IBoardService (
boardService) 5
)5 6
{ 	
this 
. 
boardService 
= 
boardService  ,
;, -
} 	
public 
State 
GetNewState  
(  !
Cell! %
currentCell& 1
,1 2
int3 6
aliveNeighbors7 E
)E F
{ 	
switch(( 
((( 
currentCell(( 
.((  
State((  %
)((% &
{)) 
case** 
State** 
.** 
Alive**  
:**  !
if++ 
(++ 
aliveNeighbors++ &
<++' (
$num++) *
||+++ -
aliveNeighbors++. <
>++= >
$num++? @
)++@ A
{,, 
return-- 
State-- $
.--$ %
Dead--% )
;--) *
}.. 
break// 
;// 
case00 
State00 
.00 
Dead00 
:00  
if11 
(11 
aliveNeighbors11 &
==11' )
$num11* +
)11+ ,
{22 
return33 
State33 $
.33$ %
Alive33% *
;33* +
}44 
break55 
;55 
}77 
return88 
currentCell88 
.88 
State88 $
;88$ %
}99 	
public;; 
void;; 
PlayGame;; 
(;; 
Cell;; !
[;;! "
];;" #
[;;# $
];;$ %
board;;& +
,;;+ ,
int;;- 0
size;;1 5
,;;5 6
int;;7 :

iterations;;; E
);;E F
{<< 	
int== 
count== 
=== 
$num== 
;== 
while>> 
(>> 

iterations>> 
>>> 
count>>  %
)>>% &
{?? 
Cell@@ 
[@@ 
]@@ 
[@@ 
]@@ 
	nextBoard@@ "
=@@# $
this@@% )
.@@) *
boardService@@* 6
.@@6 7$
SetupGameBoardWithValues@@7 O
(@@O P
size@@P T
)@@T U
;@@U V
forBB 
(BB 
intBB 
iBB 
=BB 
$numBB 
;BB 
iBB  !
<BB" #
sizeBB$ (
;BB( )
iBB* +
++BB+ -
)BB- .
{CC 
forDD 
(DD 
intDD 
jDD 
=DD  
$numDD! "
;DD" #
jDD$ %
<DD& '
sizeDD( ,
;DD, -
jDD. /
++DD/ 1
)DD1 2
{EE 
CellGG 
currentCellGG (
=GG) *
boardGG+ 0
[GG0 1
iGG1 2
]GG2 3
[GG3 4
jGG4 5
]GG5 6
;GG6 7
varII 

neighboursII &
=II' (
thisII) -
.II- .
boardServiceII. :
.II: ;
CountCellNeighboursII; N
(IIN O
boardIIO T
,IIT U
iIIV W
,IIW X
jIIY Z
,IIZ [
sizeII\ `
)II` a
;IIa b
varJJ 
aliveNeighborsJJ *
=JJ+ ,

neighboursJJ- 7
.JJ7 8
CountJJ8 =
(JJ= >
rJJ> ?
=>JJ@ B
rJJC D
.JJD E
StateJJE J
==JJK M
EnumsJJN S
.JJS T
StateJJT Y
.JJY Z
AliveJJZ _
)JJ_ `
;JJ` a
	nextBoardLL !
[LL! "
iLL" #
]LL# $
[LL$ %
jLL% &
]LL& '
.LL' (
StateLL( -
=LL. /
GetNewStateLL0 ;
(LL; <
currentCellLL< G
,LLG H
aliveNeighborsLLI W
)LLW X
;LLX Y
	nextBoardNN !
.NN! "&
PrintMultiDimensionalArrayNN" <
(NN< =
)NN= >
;NN> ?
}PP 
}QQ 
countSS 
++SS 
;SS 
boardTT 
=TT 
	nextBoardTT !
;TT! "
}UU 
}YY 	
}ZZ 
}[[ Ó
^C:\Users\User\source\repos\Ozow.Asessment.Core\Ozow.Assessment.GameOfLife\Game\IGameService.cs
	namespace 	
Ozow
 
. 

Assessment 
. 

GameOfLife $
.$ %
Game% )
{ 
public 

	interface 
IGameService !
{ 
void 
PlayGame 
( 
Cell 
[ 
] 
[ 
] 
board $
,$ %
int& )
size* .
,. /
int0 3

iterations4 >
)> ?
;? @
State

 
GetNewState

 
(

 
Cell

 
currentCell

 *
,

* +
int

, /
aliveNeighbors

0 >
)

> ?
;

? @
} 
} ¤
XC:\Users\User\source\repos\Ozow.Asessment.Core\Ozow.Assessment.GameOfLife\Models\Cell.cs
	namespace 	
Ozow
 
. 

Assessment 
. 

GameOfLife $
.$ %
Models% +
{ 
public 

class 
Cell 
{ 
public 
Cell 
( 
State 
state 
,  
int! $
row% (
,( )
int* -
column. 4
)4 5
{ 	
this		 
.		 
State		 
=		 
state		 
;		 
this

 
.

 
Row

 
=

 
row

 
;

 
this 
. 
Column 
= 
column  
;  !
} 	
public 
Cell 
( 
State 
state 
)  
{ 	
this 
. 
State 
= 
state 
; 
} 	
public 
State 
State 
{ 
get  
;  !
set" %
;% &
}' (
public 
int 
Row 
{ 
get 
; 
set !
;! "
}# $
public 
int 
Column 
{ 
get 
;  
set! $
;$ %
}& '
public 
override 
string 
ToString '
(' (
)( )
{ 	
string 
deadOrAlive 
=  
string! '
.' (
Empty( -
;. /
switch 
( 
State 
) 
{ 
case 
State 
. 
Alive  
:  !
deadOrAlive 
=  !
$str" %
;% &
break 
; 
case 
State 
. 
Dead 
:  
deadOrAlive 
=  !
$str" %
;% &
break 
; 
default 
: 
break   
;   
}!! 
return"" 
deadOrAlive"" 
;"" 
}## 	
}$$ 
}%% Õ
TC:\Users\User\source\repos\Ozow.Asessment.Core\Ozow.Assessment.GameOfLife\Program.cs
	namespace 	
Ozow
 
. 

Assessment 
. 

GameOfLife $
{ 
class 	
Program
 
{		 
static 
void 
Main 
( 
string 
[  
]  !
args" &
)& '
{ 	
ConfigureServices 
( 
) 
.   
BuildServiceProvider  4
(4 5
)5 6
.6 7

GetService7 A
<A B
AppB E
>E F
(F G
)G H
.H I
RunI L
(L M
)M N
;N O
} 	
private 
static 
IServiceCollection )
ConfigureServices* ;
(; <
)< =
{ 	
var 
services 
= 
new 
ServiceCollection 0
(0 1
)1 2
;2 3
services 
. 
AddTransient !
<! "
IBoardService" /
,/ 0
BoardService1 =
>= >
(> ?
)? @
;@ A
services 
. 
AddTransient !
<! "
IGameService" .
,. /
GameService0 ;
>; <
(< =
)= >
;> ?
services 
. 
AddTransient !
<! "
App" %
>% &
(& '
)' (
;( )
return 
services 
; 
} 	
} 
} ø
]C:\Users\User\source\repos\Ozow.Asessment.Core\Ozow.Assessment.GameOfLife\RandomExtensions.cs
	namespace 	
Ozow
 
. 

Assessment 
. 

GameOfLife $
{ 
public 

static 
class 
RandomExtensions (
{ 
public		 
static		 
T		 
NextEnum		  
<		  !
T		! "
>		" #
(		# $
this		$ (
Random		) /
random		0 6
)		6 7
{

 	
var 
values 
= 
Enum 
. 
	GetValues '
(' (
typeof( .
(. /
T/ 0
)0 1
)1 2
;2 3
return 
( 
T 
) 
values 
. 
GetValue %
(% &
random& ,
., -
Next- 1
(1 2
values2 8
.8 9
Length9 ?
)? @
)@ A
;A B
} 	
public 
static 
void &
PrintMultiDimensionalArray 5
<5 6
T6 7
>7 8
(8 9
this9 =
T> ?
[? @
]@ A
[A B
]B C
arrayD I
)I J
{ 	
Console 
. 
SetCursorPosition %
(% &
$num& '
,' (
$num) *
)* +
;+ ,
for 
( 
int 
i 
= 
$num 
; 
i 
< 
array  %
.% &
Length& ,
;, -
i. /
++/ 1
)1 2
{ 
for 
( 
int 
j 
= 
$num 
; 
j  !
<" #
array$ )
[) *
i* +
]+ ,
., -
Length- 3
;3 4
j5 6
++6 8
)8 9
{ 
Console 
. 
Write !
(! "
array" '
[' (
i( )
]) *
[* +
j+ ,
], -
+. /
$str0 4
)4 5
;5 6
} 
Console 
. 
	WriteLine !
(! "
)" #
;# $
} 
Thread 
. 
Sleep 
( 
$num 
) 
; 
} 	
} 
} 